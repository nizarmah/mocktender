{
    "\u002FUsers\u002Fnizarmah\u002FPersonal\u002Fmocktender\u002Fsrc\u002Fpkg\u002Finstrumenter\u002Fclient.ts": {
        "instrumentSource": {
            "recorder-dummy": [
                {
                    "args": [
                        "\u002FUsers\u002Fnizarmah\u002FPersonal\u002Fmocktender\u002Fsrc\u002Fcmd\u002Frecorder\u002Ftestdata\u002Fdummy\u002Findex.test.ts",
                        "import { createServer } from \".\u002Findex.ts\"\n\ntype TestCase = {\n  desc: string\n  url: string\n  want: {\n    status: number\n    body: string\n  }\n}\n\nconst tt: TestCase[] = [\n  {\n    desc: \"greeting.default\",\n    url: \"\u002Fhello\",\n    want: {\n      status: 200,\n      body: \"Hello, world!\"\n    }\n  },\n  {\n    desc: \"greeting.withName\",\n    url: \"\u002Fhello?name=John\",\n    want: {\n      status: 200,\n      body: \"Hello, John!\"\n    }\n  },\n  {\n    desc: \"greeting.notFound\",\n    url: \"\u002Fnot-found\",\n    want: {\n      status: 404,\n      body: \"Not Found\"\n    }\n  }\n]\n\ndescribe(\"dummy\", () =\u003E {\n  const server = createServer()\n\n  beforeAll(() =\u003E {\n    server.listen(8080)\n  })\n\n  afterAll(() =\u003E {\n    server.close()\n  })\n\n  it.each(tt)(\"$desc\", async (tc) =\u003E {\n    global.__rid = tc.desc\n\n    const res = await fetch(`http:\u002F\u002Flocalhost:8080${tc.url}`)\n\n    const gotStatus = res.status\n    expect(gotStatus).toBe(tc.want.status)\n\n    const gotBody = await res.text()\n    expect(gotBody).toBe(tc.want.body)\n  })\n})\n"
                    ],
                    "result": "import { createServer } from \".\u002Findex.ts\";\ntype TestCase = {\n    desc: string;\n    url: string;\n    want: {\n        status: number;\n        body: string;\n    };\n};\nconst tt: TestCase[] = [\n    {\n        desc: \"greeting.default\",\n        url: \"\u002Fhello\",\n        want: {\n            status: 200,\n            body: \"Hello, world!\"\n        }\n    },\n    {\n        desc: \"greeting.withName\",\n        url: \"\u002Fhello?name=John\",\n        want: {\n            status: 200,\n            body: \"Hello, John!\"\n        }\n    },\n    {\n        desc: \"greeting.notFound\",\n        url: \"\u002Fnot-found\",\n        want: {\n            status: 404,\n            body: \"Not Found\"\n        }\n    }\n];\ndescribe(\"dummy\", () =\u003E {\n    const server = createServer();\n    beforeAll(() =\u003E {\n        server.listen(8080);\n    });\n    afterAll(() =\u003E {\n        server.close();\n    });\n    it.each(tt)(\"$desc\", async (tc) =\u003E {\n        global.__rid = tc.desc;\n        const res = await fetch(`http:\u002F\u002Flocalhost:8080${tc.url}`);\n        const gotStatus = res.status;\n        expect(gotStatus).toBe(tc.want.status);\n        const gotBody = await res.text();\n        expect(gotBody).toBe(tc.want.body);\n    });\n});\n"
                },
                {
                    "args": [
                        "\u002FUsers\u002Fnizarmah\u002FPersonal\u002Fmocktender\u002Fsrc\u002Fcmd\u002Frecorder\u002Ftestdata\u002Fdummy\u002Findex.ts",
                        "import http from 'http'\nimport URL from 'url'\n\nfunction greet(name: string = \"world\") {\n  return `Hello, ${name}!`\n}\n\n\u002F** @bridge bridges the server request handler with the greet function *\u002F\nexport function helloHandler(url: string): { status: number; body: string } {\n  const parsed = URL.parse(url, true);\n\n  const name = Array.isArray(parsed.query.name)\n    ? parsed.query.name[0]\n    : parsed.query.name\n\n  return {\n    status: 200,\n    body: greet(name)\n  }\n}\n\nconst requestHandler = (req: http.IncomingMessage, res: http.ServerResponse) =\u003E {\n  if (req.url?.startsWith(\"\u002Fhello\")) {\n    const { status, body } = helloHandler(req.url)\n    res.writeHead(status, { 'Content-Type': 'text\u002Fplain' })\n    res.end(body)\n    return\n  }\n\n  res.writeHead(404, { 'Content-Type': 'text\u002Fplain' })\n  res.end('Not Found')\n}\n\nexport function createServer(): http.Server {\n  return http.createServer(requestHandler)\n}\n"
                    ],
                    "result": "import http from \"http\";\nimport URL from \"url\";\nfunction greet(name: string = \"world\") {\n    return `Hello, ${name}!`;\n}\n\u002F** @bridge bridges the server request handler with the greet function *\u002F\nexport function helloHandler(url: string): {\n    status: number;\n    body: string;\n} {\n    function helloHandler(url: string): {\n        status: number;\n        body: string;\n    } {\n        const parsed = URL.parse(url, true);\n        const name = Array.isArray(parsed.query.name)\n            ? parsed.query.name[0]\n            : parsed.query.name;\n        return {\n            status: 200,\n            body: greet(name)\n        };\n    }\n    return __tsf(helloHandler, __filename, this, [\n        url\n    ]);\n}\nconst requestHandler = (req: http.IncomingMessage, res: http.ServerResponse) =\u003E {\n    if (req.url?.startsWith(\"\u002Fhello\")) {\n        const { status, body } = helloHandler(req.url);\n        res.writeHead(status, { \"Content-Type\": \"text\u002Fplain\" });\n        res.end(body);\n        return;\n    }\n    res.writeHead(404, { \"Content-Type\": \"text\u002Fplain\" });\n    res.end(\"Not Found\");\n};\nexport function createServer(): http.Server {\n    return http.createServer(requestHandler);\n}\n"
                }
            ]
        }
    },
    "\u002FUsers\u002Fnizarmah\u002FPersonal\u002Fmocktender\u002Fsrc\u002Fcmd\u002Frecorder\u002Ftestdata\u002Fdummy\u002Findex.ts": {
        "helloHandler": {
            "greeting.default": [
                {
                    "args": [
                        "\u002Fhello"
                    ],
                    "result": {
                        "status": 200,
                        "body": "Hello, world!"
                    }
                }
            ],
            "greeting.withName": [
                {
                    "args": [
                        "\u002Fhello?name=John"
                    ],
                    "result": {
                        "status": 200,
                        "body": "Hello, John!"
                    }
                }
            ]
        }
    }
}