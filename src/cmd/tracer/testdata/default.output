import { __tsf, __taf, __tsg, __tag } from "../../pkg/instrumentation/lib.ts";
import { readFileSync } from "node:fs";
import { stripTypeScriptTypes } from "node:module";
import { fileURLToPath } from "node:url";
import { instrument } from "../../pkg/monkeypatch/instrument.ts";
import { readSourceFile } from "../../pkg/typescript/reader.ts";
import { printSourceFile } from "../../pkg/typescript/printer.ts";
export const load = async (url, ctx, nextLoad)=>{
    async function __fn(url, ctx, nextLoad) {
        if (!url.startsWith("file://") || !url.endsWith(".ts")) {
            return nextLoad(url);
        }
        const path = fileURLToPath(url);
        const instrumented = getInstrumentedCode(path);
        const stripped = stripTypeScriptTypes(instrumented, {
            mode: "transform"
        });
        return {
            shortCircuit: true,
            format: "module",
            source: stripped
        };
    }
    return await __taf("load", __fn, this, [
        url,
        ctx,
        nextLoad
    ]);
};
function getInstrumentedCode(path) {
    function __fn(path) {
        if (path.endsWith("pkg/instrumentation/lib.ts")) {
            return readFileSync(path, "utf-8");
        }
        const source = readSourceFile(path);
        const instrumented = instrument(source);
        return printSourceFile(instrumented);
    }
    return __tsf("getInstrumentedCode", __fn, this, [
        path
    ]);
}
